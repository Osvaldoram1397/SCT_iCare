
@{
    ViewBag.Title = "TablaDinamica";

    GMIEntities db = new GMIEntities();

    var canales = db.Canales.OrderBy(o => o.NombreCanal);

    int flag = 1;

    int diaCorrienteHeader = 1;
    int diaCorrienteRow = 1;
    int diaCorrienteFooter = 1;

    int metaDiaria = 0;

    int diaMes = DateTime.Today.Day;

    int episTotal = 0;
    int dictamenTotal = 0;

    int episTotalTOTAL = 0;
    int dictamenTotalTOTAL = 0;

    int episTotalFooter = 0;
    int? dictamenTotalFooter = 0;

    int metaMensual = 0;

    foreach(var e in db.Canales)
    {
        metaMensual += Convert.ToInt32(e.Meta);
    }

    int metaDiariaFooter = metaMensual / 30;

    var realizadosCallCenter = db.Cita.Join(db.Captura, n => n.idPaciente, m => m.idPaciente, (n, m) => new { N = n, M = m })
.Where(w => w.M.FinalCaptura != null && w.N.Canal == "Call Center");

    var realizadosALT = db.PacienteESP.Where(w => w.Capturista != null);

    var realizadosALTIS = 0;

    var realizadosGestores = db.Cita.Join(db.Captura, n => n.idPaciente, m => m.idPaciente, (n, m) => new { N = n, M = m }).Join(db.Referido, o => o.N.ReferidoPor, p => p.Nombre, (o, p) => new { O = o, P = p })
                .Where(w => w.O.M.FinalCaptura != null && w.P.Tipo == "Gestor");

    var realizadosMedia = 0;

    var realizadosCATEM = db.Cita.Join(db.Captura, n => n.idPaciente, m => m.idPaciente, (n, m) => new { N = n, M = m }).Join(db.Referido, o => o.N.ReferidoPor, p => p.Nombre, (o, p) => new { O = o, P = p })
                .Where(w => w.O.M.FinalCaptura != null && w.P.Tipo.Contains("CATEM"));

    var realizadosEmpresas = db.Cita.Join(db.Captura, n => n.idPaciente, m => m.idPaciente, (n, m) => new { N = n, M = m }).Join(db.Referido, o => o.N.ReferidoPor, p => p.Nombre, (o, p) => new { O = o, P = p })
                .Where(w => w.O.M.FinalCaptura != null && w.P.Tipo == "Empresa");
}

<html>
    <head>

        <meta charset="utf-8">

        <br/>
        <h2 style="color:white">Metas Diarias</h2>
        <br/>

        <style>

            body {
                margin: 0;
                font-family: 'Manrope', 'Century Gothic';
                font-size: 1rem;
                line-height: 1.6em;
                color: black;
            }

            * {
                box-sizing: border-box
            }

            .page-container {
                max-width: 1200px; 
                margin: 2rem auto;
            }

            .table-cebra {
                border-top: 1px solid #ddd;                
                border-spacing: 0;
                font-size: 13px;
                width: 100%;
                height: 100%;
                max-width: 100%;
                max-height: 100%;
            }

                .table-cebra > thead > tr > th,
                .table-cebra > tbody > tr > th,
                .table-cebra > tfoot > tr > th,
                .table-cebra > thead > tr > td,
                .table-cebra > tbody > tr > td,
                .table-cebra > tfoot > tr > td {
                    padding: 8px;
                    line-height: 1.42857143;
                    vertical-align: central;
                }

                .table-cebra thead tr {
                    background: #337ab7;
                    color: white;
                    text-align: center;
                }

                .table-cebra thead tr th td {
                    text-align: center;
                    font-size: smaller;
                    background: #0275d8;
                }

            .table-cebra th,
            .table-cebra td {
                border-right: 1px solid #ddd !important;
                min-width: 100px;
                text-align: center;
            }

            .table-cebra th:last-child,
            .table-cebra td:last-child {
                border-right: 0;
            }

            .table-cebra th,
            .table-cebra td {
                border-bottom: 1px solid #ddd !important;
            }

            .table-cebra tbody tr { 
                background: white;
            }

            .table-cebra tbody tr:first-child { 
                background: #d9edf7;
            }

            table-cebra tbody td {
                text-align: center;
            }

            /*Sticky*/

            .table-cebra thead tr .sticky {
                background: #337ab7;
                color: white;
                text-align: center;
            }

            .table-cebra thead tr th td .sticky {
                text-align: center;
                font-size: smaller;
                background: #337ab7;
            }

            .table-cebra th,
            .table-cebra td .sticky {
                border-right: 1px solid #ddd !important;
                min-width: 100px;
                text-align: center;
            }

            .table-cebra th,
            .table-cebra td .sticky {
                border-bottom: 1px solid #ddd !important;
            }

            .table-cebra tbody tr .sticky {
                background: white;
            }

            .table-cebra tbody tr:first-child .sticky {
                background: #d9edf7;
            }

            .table-cebra tbody td .sticky {
                text-align: center;
            }

            /*Stickys 2*/

            .table-cebra thead tr .sticky2 {
                background: #337ab7;
                color: white;
                text-align: center;
            }

            .table-cebra thead tr th td .sticky2 {
                text-align: center;
                font-size: smaller;
                background: #337ab7;
            }

            .table-cebra th,
            .table-cebra td .sticky2 {
                border-right: 1px solid #ddd !important;
                min-width: 100px;
                text-align: center;
            }

            .table-cebra th,
            .table-cebra td .sticky2 {
                border-bottom: 1px solid #ddd !important;
            }

            .table-cebra tbody tr .sticky2 {
                background: white;
            }

            .table-cebra tbody tr:first-child .sticky2 {
                background: #d9edf7;
            }

            .table-cebra tbody td .sticky2 {
                text-align: center;
            }

            /*Stickys 3*/

            .table-cebra thead tr .sticky3 {
                background: #337ab7;
                color: white;
                text-align: center;
            }

            .table-cebra thead tr th td .sticky3 {
                text-align: center;
                font-size: smaller;
                background: #337ab7;
            }

            .table-cebra th,
            .table-cebra td .sticky3 {
                border-right: 1px solid #ddd !important;
                min-width: 100px;
                text-align: center;
            }

            .table-cebra th,
            .table-cebra td .sticky3 {
                border-bottom: 1px solid #ddd !important;
            }

            .table-cebra tbody tr .sticky3 {
                background: white;
            }

            .table-cebra tbody tr:first-child .sticky3 {
                background: #d9edf7;
            }

            .table-cebra tbody td .sticky3 {
                text-align: center;
            }

            /*Stickys 4*/

            .table-cebra thead tr .sticky4 {
                background: #337ab7;
                color: white;
                text-align: center;
            }

            .table-cebra thead tr th td .sticky4 {
                text-align: center;
                font-size: smaller;
                background: #337ab7;
            }

            .table-cebra th,
            .table-cebra td .sticky4 {
                border-right: 1px solid #ddd !important;
                min-width: 100px;
                text-align: center;
            }

            .table-cebra th,
            .table-cebra td .sticky4 {
                border-bottom: 1px solid #ddd !important;
            }

            .table-cebra tbody tr .sticky4 {
                background: white;
            }

            .table-cebra tbody tr:first-child .sticky4 {
                background: #d9edf7;
            }

            .table-cebra tbody td .sticky4 {
                text-align: center;
            }

            /*Stickys 5*/

            .table-cebra thead tr .sticky5 {
                background: #337ab7;
                color: white;
                text-align: center;
            }

            .table-cebra thead tr th td .sticky5 {
                text-align: center;
                font-size: smaller;
                background: #337ab7;
            }

            .table-cebra th,
            .table-cebra td .sticky5 {
                border-right: 1px solid #ddd !important;
                min-width: 100px;
                text-align: center;
            }

            .table-cebra th,
            .table-cebra td .sticky5 {
                border-bottom: 1px solid #ddd !important;
            }

            .table-cebra tbody tr .sticky5 {
                background: white;
            }

            .table-cebra tbody tr:first-child .sticky5 {
                background: #d9edf7;
            }

            .table-cebra tbody td .sticky5 {
                text-align: center;
            }


            /*Seccion de ID en celdas para las tablas*/

            #CeldaSmall {
                background: #337ab7;
                min-width: 85px;
            }

            #Especial {
                background: #d9edf7;
                min-width: 85px;
            }

            #Grisaseo {
                background: whitesmoke;
            }

            /*Seccion de hover para la tabla nueva clase, clase a (Que cambie de color cuando pasas el mouse por encima)*/

            .a > tbody > tr:hover {
                background-color: #f5f5f5;
            }

            .a tbody tr:first-child:hover {
                background: #d9edf7;
            }

            .a > tbody > tr > td.active:hover,
            .a > tbody > tr > th.active:hover,
            .a > tbody > tr.active:hover > td,
            .a > tbody > tr:hover > .active,
            .a > tbody > tr.active:hover > th {
                background-color: #e8e8e8;
            }

            .a > tbody > tr > td.success:hover,
            .a > tbody > tr > th.success:hover,
            .a > tbody > tr.success:hover > td,
            .a > tbody > tr:hover > .success,
            .a > tbody > tr.success:hover > th {
                background-color: #d0e9c6;
            }

            .a > tbody > tr > td.info:hover,
            .a > tbody > tr > th.info:hover,
            .a > tbody > tr.info:hover > td,
            .a > tbody > tr:hover > .info,
            .a > tbody > tr.info:hover > th {
                background-color: #c4e3f3;
            }

            .a > tbody > tr > td.warning:hover,
            .a > tbody > tr > th.warning:hover,
            .a > tbody > tr.warning:hover > td,
            .a > tbody > tr:hover > .warning,
            .a > tbody > tr.warning:hover > th {
                background-color: #faf2cc;
            }

            .a > tbody > tr > td.danger:hover,
            .a > tbody > tr > th.danger:hover,
            .a > tbody > tr.danger:hover > td,
            .a > tbody > tr:hover > .danger,
            .a > tbody > tr.danger:hover > th {
                background-color: #ebcccc;
            }

            /*Contenedor center ellipse Div*/

            .table-container {
                max-width: 100%;
                max-height: 100%;
                overflow-x: scroll;
                border-left: 1px solid #ddd;
                border-right: 1px solid #ddd;
            }

            .table-cebra .sticky {
                position: sticky;
                left: 0;
            }

            .table-cebra .sticky2 {
                position: sticky;
                left: 85px;
            }

            .table-cebra .sticky3 {
                position: sticky;
                left: 185px;
            }

            .table-cebra .sticky4 {
                position: sticky;
                left: 285px;
            }

            .table-cebra .sticky5 {
                position: sticky;
                left: 385px;
            }

                       
        </style>

    </head>

    <body>

        <form class="form-inline" method="post" enctype="multipart/form-data" action="@Url.Content("~/Admin/TablaMetasDiarias")">
            <div>
                <select name="gestor" style="font-size:2vh" class="form-control">
                    <option>Seleccionar</option>
                    <option value="Diarias">METAS DIARIAS</option>
                    <option value="Semanales">METAS SEMANALES</option>
                    <option value="Sucursales">SUCURSALES</option>
                    <option value="CallCenter">CALL CENTER</option>
                    <option value="Gestores">GESTORES</option>
                    <option value="Alternativos">ALTERNATIVOS</option>
                </select>
                <input type="month" class="form-control" />
                <input type="submit" class="btn btn-info" value="Enviar" />
            </div>
        </form>

        <div class="page-container">
            <div class="table-container">               
                <table class="table-cebra a">
                    <thead>
                        <tr>
                            <th class="sticky" id="CeldaSmall">CANAL</th>
                            <td class="sticky2" colspan="2">TOTAL</td>
                            <td class="sticky4" colspan="2">META</td>

                            @{

                                while (diaCorrienteHeader <= diaMes)
                                {
                                    DateTime fecha = new DateTime(DateTime.Today.Year, DateTime.Today.Month, diaCorrienteHeader);
                                    string fechaString = fecha.ToString("dd-MM-yy");
                                    <td colspan="2">
                                        @fechaString
                                    </td>
                                    diaCorrienteHeader++;

                                }

                                diaCorrienteHeader = 1;
                            }
                        </tr>

                    </thead>

                    <tbody>

                        <tr>

                            <td class="sticky" id="Especial"></td>

                            <td class="sticky2">
                                <b>Realizados</b>
                            </td>
                            <td class="sticky3">
                                <b>Diferencia</b>
                            </td>
                            <td class="sticky4">
                                <b>Mensual</b>
                            </td>
                            <td class="sticky5">
                                <b>Diaria</b>
                            </td>

                            @{

                                while (diaCorrienteHeader <= diaMes)
                                {
                                    <td>
                                        Realizados
                                    </td>
                                    <td>
                                        Diferencia
                                    </td>
                                    diaCorrienteHeader++;
                                }
                            }


                        </tr>


                        @foreach (var item in canales)
                        {

                            <tr>

                                <td class="sticky" id="Especial">
                                    <b>@item.NombreCanal</b>
                                </td>

                                @{

                                    while (diaCorrienteRow <= diaMes)
                                    {
                                        DateTime fecha = new DateTime(DateTime.Today.Year, DateTime.Today.Month, diaCorrienteRow);
                                        DateTime fecha1 = new DateTime(DateTime.Today.Year, DateTime.Today.Month, diaCorrienteRow).AddDays(1);

                                        int realizadoHoy = 0;
                                        int diferenciaHoy = 0;

                                        if (item.NombreCanal == "Call Center")
                                        {
                                            realizadoHoy = realizadosCallCenter.Where(w => w.M.FechaExpdiente >= fecha && w.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;

                                        }
                                        else if (item.NombreCanal == "CATEM")
                                        {
                                            realizadoHoy = realizadosCATEM.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;

                                        }
                                        else if (item.NombreCanal == "ALT")
                                        {
                                            realizadoHoy = realizadosALT.Where(w => w.FechaCaptura >= fecha && w.FechaCaptura < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;

                                        }
                                        else if (item.NombreCanal == "Gestores")
                                        {
                                            realizadoHoy = realizadosGestores.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;

                                        }
                                        else if (item.NombreCanal == "Empresas")
                                        {
                                            realizadoHoy = realizadosEmpresas.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;

                                        }

                                        //episTotal += epis;
                                        //pausaTotal += pausa;
                                        //dictamenTotal += dictamen;
                                        diaCorrienteRow++;

                                    }

                                    episTotalTOTAL += episTotal;
                                    dictamenTotalTOTAL += dictamenTotal;

                                    <td class="sticky2" id="Grisaseo">
                                        <b>@episTotal</b>
                                    </td>
                                    <td class="sticky3" id="Grisaseo">
                                        <b>@dictamenTotal</b>
                                    </td>

                                    diaCorrienteRow = 1;

                                    metaDiaria = Convert.ToInt32(item.Meta) / 30;
                                    <td class="sticky4" id="Grisaseo">
                                        <b>@item.Meta</b>
                                    </td>
                                    <td class="sticky5" id="Grisaseo">
                                        <b>@metaDiaria</b>
                                    </td>

                                    while (diaCorrienteRow <= diaMes)
                                    {
                                        DateTime fecha = new DateTime(DateTime.Today.Year, DateTime.Today.Month, diaCorrienteRow);
                                        DateTime fecha1 = new DateTime(DateTime.Today.Year, DateTime.Today.Month, diaCorrienteRow).AddDays(1);

                                        int realizadoHoy = 0;
                                        int diferenciaHoy = 0;

                                        if (item.NombreCanal == "Call Center")
                                        {
                                            realizadoHoy = realizadosCallCenter.Where(w => w.M.FechaExpdiente >= fecha && w.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;

                                        }
                                        else if (item.NombreCanal == "CATEM")
                                        {
                                            realizadoHoy = realizadosCATEM.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;
                                        }
                                        else if (item.NombreCanal == "ALT")
                                        {
                                            realizadoHoy = realizadosALT.Where(w => w.FechaCaptura >= fecha && w.FechaCaptura < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;
                                        }
                                        else if (item.NombreCanal == "Gestores")
                                        {
                                            realizadoHoy = realizadosGestores.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;
                                        }
                                        else if (item.NombreCanal == "Empresas")
                                        {
                                            realizadoHoy = realizadosEmpresas.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                            diferenciaHoy = realizadoHoy - (Convert.ToInt32(item.Meta) / 30);

                                            episTotal += realizadoHoy;
                                            dictamenTotal += diferenciaHoy;
                                        }

                                        //episTotal += epis;
                                        //pausaTotal += pausa;
                                        //dictamenTotal += dictamen;

                                        <td>
                                            @realizadoHoy                                           
                                        </td>
                                        <td>
                                            @diferenciaHoy
                                        </td>
                                        diaCorrienteRow++;

                                    }

                                    diaCorrienteRow = 1;
                                }

                                @{
                                    episTotal = 0;
                                    dictamenTotal = 0;
                                }

                            </tr>

                            flag += 1;

                         }

                        <tr>
                            <td class="sticky" id="Especial" style="border-bottom: 0px">
                                <b>TOTALES</b>
                            </td>

                            <td class="sticky2" id="Grisaseo" style="border-bottom: 0px">
                                <b>@episTotalTOTAL</b>
                            </td>
                            <td class="sticky3" id="Grisaseo" style="border-bottom: 0px">
                                <b>@dictamenTotalTOTAL</b>
                            </td>

                            <td class="sticky4" id="Grisaseo" style="border-bottom: 0px">
                                <b>@metaMensual</b>
                            </td>
                            <td class="sticky5" id="Grisaseo" style="border-bottom: 0px">
                                <b>@metaDiariaFooter</b>
                            </td>

                            @{
                                foreach (var item in canales)
                                {
                                    while (diaCorrienteFooter <= diaMes)
                                    {
                                        DateTime fecha = new DateTime(DateTime.Today.Year, DateTime.Today.Month, diaCorrienteFooter);
                                        DateTime fecha1 = new DateTime(DateTime.Today.Year, DateTime.Today.Month, diaCorrienteFooter).AddDays(1);

                                        int? realizadoHoy = 0;
                                        int? diferenciaHoy = 0;
                                        episTotalFooter = 0;
                                        dictamenTotalFooter = 0;

                                        int? metaCallCenter = 0;
                                        int? metaCATEM = 0;
                                        int? metaEmpresas = 0;
                                        int? metaAlternativos = 0;
                                        int? metaGestores = 0;

                                        foreach (var meta in canales)
                                        {
                                            if (meta.NombreCanal == "Call Center")
                                            {
                                                metaCallCenter = meta.Meta;
                                            }
                                            else if (meta.NombreCanal == "CATEM")
                                            {
                                                metaCATEM = meta.Meta;
                                            }
                                            else if (meta.NombreCanal == "Empresas")
                                            {
                                                metaEmpresas = meta.Meta;
                                            }
                                            else if (meta.NombreCanal == "ALT")
                                            {
                                                metaAlternativos = meta.Meta;
                                            }
                                            else if (meta.NombreCanal == "Gestores")
                                            {
                                                metaGestores = meta.Meta;
                                            }
                                        }

                                        episTotalFooter += realizadosCallCenter.Where(w => w.M.FechaExpdiente >= fecha && w.M.FechaExpdiente < fecha1).Count();
                                        realizadoHoy = realizadosCallCenter.Where(w => w.M.FechaExpdiente >= fecha && w.M.FechaExpdiente < fecha1).Count();
                                        dictamenTotalFooter += (realizadoHoy - (metaCallCenter) / 30);

                                        episTotalFooter += realizadosCATEM.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                        realizadoHoy = realizadosCATEM.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                        dictamenTotalFooter += (realizadoHoy - (metaCATEM) / 30);

                                        episTotalFooter += realizadosALT.Where(w => w.FechaCaptura >= fecha && w.FechaCaptura < fecha1).Count();
                                        realizadoHoy = realizadosALT.Where(w => w.FechaCaptura >= fecha && w.FechaCaptura < fecha1).Count();
                                        dictamenTotalFooter += (realizadoHoy - (metaAlternativos) / 30);

                                        episTotalFooter += realizadosGestores.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                        realizadoHoy = realizadosGestores.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                        dictamenTotalFooter += (realizadoHoy - (metaGestores) / 30);

                                        episTotalFooter += realizadosEmpresas.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                        realizadoHoy = realizadosEmpresas.Where(w => w.O.M.FechaExpdiente >= fecha && w.O.M.FechaExpdiente < fecha1).Count();
                                        dictamenTotalFooter += (realizadoHoy - (metaEmpresas) / 30);


                                        <td style="border-bottom: 0px">
                                            @episTotalFooter
                                        </td>
                                        <td style="border-bottom: 0px">
                                            @dictamenTotalFooter
                                        </td>


                                        diaCorrienteFooter++;

                                    }
                                }
                            }

                        </tr>

                    </tbody>

                </table>

            </div @*Table-container*@>

         </div @*Page-container*@>

    </body>

</html>
